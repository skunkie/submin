#!/usr/bin/python

import os
import sys
import time
import signal
import subprocess
import socket
import errno
if not 'SUBMIN_ENV' in os.environ:
	os.environ['SUBMIN_ENV'] = '/var/lib/submin'
from submin.models import storage, options

storage.open()
os.environ['SUBMIN_ALIAS'] = options.value('base_url_submin')
storage.close()

from wsgiref import simple_server
from submin.dispatch.wsgi_app import application
 
class NoLogHandler(simple_server.WSGIRequestHandler):
    def log_message(self, *args):
        pass

class WSGIServerV4orV6(simple_server.WSGIServer):
	address_family = socket.AF_INET6

def run():
	httpd = WSGIServerV4orV6(('::',8000), NoLogHandler)
	httpd.set_app(application)
	try:
		httpd.serve_forever()
	except KeyboardInterrupt:
		print ': exiting'

mtimes = {}
def source_files_changed():
	changed = False
	for root, dirs, files in os.walk(options.lib_path()):
		for f in files:
			if f.endswith('.py'):
				path = os.path.join(root, f)
				mtime = os.path.getmtime(path)
				if path in mtimes and mtimes[path] != mtime:
					changed = True
				mtimes[path] = mtime
	return changed


def run_autoreload():
	programname = os.path.abspath(sys.argv[0])
	while True:
		changed = source_files_changed()
		new_time = old_time = os.path.getmtime(programname)
		print 'starting WSGI server'
		while True:
			try:
				argv = sys.argv[:]
				argv.append('--no-auto-reload')
				child = subprocess.Popen(argv)
			except OSError, e:
				if e.errno == errno.ETXTBSY:
					pass	
			else:
				break
		try:
			while new_time == old_time:
				time.sleep(1)
				try:
					new_time = os.path.getmtime(programname)
					if source_files_changed():
						break
				except OSError:
					print "Could not stat file %s" % programname
					pass

		except KeyboardInterrupt:
			return
		finally:
			if child:
				child.terminate()

		# is it ourselves? then restart the whole executable
		if new_time != old_time:
			print 'Master file changed, restarting'
			while True:
				try:
					os.execvpe(programname, sys.argv, os.environ)
				except OSError, e:
					if e.errno == errno.ETXTBSY:
						continue
					raise

if '--no-auto-reload' in sys.argv:
	run()
else:
	print 'starting auto-reload server'
	run_autoreload()
